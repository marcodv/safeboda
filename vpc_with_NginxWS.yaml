Mappings:
    AvailabilityZone:
        AZ1:
            Name: us-east-1a
            LbCidr: "10.0.20.0/24"
            WsCidr: "10.0.21.0/24"
            BastionCidr: "10.0.22.0/24"
            PublicWsCidr: "10.0.23.0/24"
        AZ2:
            Name: us-east-1b
            LbCidr: "10.0.40.0/24"
            WsCidr: "10.0.41.0/24"
            BastionCidr: "10.0.42.0/24"
            PublicWsCidr: "10.0.43.0/24"

Resources:
    Vpc:
        Type: AWS::EC2::VPC
        Properties:
            EnableDnsSupport: true
            EnableDnsHostnames: true
            CidrBlock: "10.0.0.0/16"
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-Vpc"

    # Internet gateway configuration
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-InternetGateway"

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref Vpc
            InternetGatewayId: !Ref InternetGateway

    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-RouteTable"

    PrivateRouteTableAZ1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-RouteTableAZ1"

    PrivateRouteTableAZ2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-RouteTableAZ2"

    WsNetworkNatEIP1:
        Type: AWS::EC2::EIP
        Properties:
            Domain: !Ref Vpc

    WsNetworkNatEIP2:
        Type: AWS::EC2::EIP
        Properties:
            Domain: !Ref Vpc

    WsNatGateWayAZ1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt WsNetworkNatEIP1.AllocationId
            SubnetId: !Ref BastionSubnetAZ1
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-NatGatewayAZ1"

    WsNatGateWayAZ2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt WsNetworkNatEIP2.AllocationId
            SubnetId: !Ref BastionSubnetAZ2
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-NatGatewayAZ2"

    WsRouteTableAZ1:
        DependsOn: PrivateRouteTableAZ1
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTableAZ1
            SubnetId: !Ref WsSubnetAZ1

    WsRouteTableAZ2:
        DependsOn: PrivateRouteTableAZ2
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTableAZ2
            SubnetId: !Ref WsSubnetAZ2

    WsRouteNat1:
        DependsOn: WsNatGateWayAZ1
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            RouteTableId: !Ref PrivateRouteTableAZ1
            NatGatewayId: !Ref WsNatGateWayAZ1

    WsRouteNat2:
        DependsOn: WsNatGateWayAZ2
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            RouteTableId: !Ref PrivateRouteTableAZ2
            NatGatewayId: !Ref WsNatGateWayAZ2

    RouteInternetGateway:
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            RouteTableId: !Ref RouteTable
            GatewayId: !Ref InternetGateway

    # Bastion Network ACLs
    BastionNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-BastionNetworkAcl"

    # Bastion Network ACLs
    PublicWsNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-PublicWsNetworkAcl"

    # PublicWs Network ACLs Ephemeral Inbound
    PublicWsNetworkAclAllowEphemeralInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicWsNetworkAcl
            RuleNumber: 101
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 1024
                To: 65535

    # PublicWs Network ACLs Httpd Inbound
    PublicWsNetworkAclAllowHttpdInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicWsNetworkAcl
            RuleNumber: 102
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 80
                To: 80

    # PublicWs Network ACLs HTTPS Inbound
    PublicWsNetworkAclAllowHttpsInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicWsNetworkAcl
            RuleNumber: 103
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 443
                To: 443

    # PublicWs Network ACLs Outbound
    PublicWsNetworkAclAllowAllOutbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicWsNetworkAcl
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 0
                To: 65535

    # Bastion Network ACLs Ssh Inbound
    BastionNetworkAclAllowSshInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref BastionNetworkAcl
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 22
                To: 22

    # Bastion Network ACLs Ephemeral Inbound
    BastionNetworkAclAllowEphemeralInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref BastionNetworkAcl
            RuleNumber: 101
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 1024
                To: 65535

    # Bastion Network ACLs Httpd Inbound
    BastionNetworkAclAllowHttpdInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref BastionNetworkAcl
            RuleNumber: 102
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 80
                To: 80

    # Bastion Network ACLs HTTPS Inbound
    BastionNetworkAclAllowHttpsInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref BastionNetworkAcl
            RuleNumber: 103
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 443
                To: 443

    # Bastion Network ACLs Outbound
    BastionNetworkAclAllowAllOutbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref BastionNetworkAcl
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 0
                To: 65535

    # Load balancer Network ACLs
    LbNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-LbNetworkAcl"

    # Load balancer Network ACLs Inbound
    LbNetworkAclAllowAllInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref LbNetworkAcl
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 0
                To: 65535

    # Load balancer Network ACLs Outbound
    LbNetworkAclAllowAllOutbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref LbNetworkAcl
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 0
                To: 65535

    # Web server Network ACLs
    WsNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref Vpc
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-WsNetworkAcl"

    # Web server Network ACLs Inbound
    WsNetworkAclAllowHttpInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref WsNetworkAcl
            RuleNumber: 100
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: !GetAtt Vpc.CidrBlock
            PortRange:
                From: 80
                To: 80

    WsNetworkAclAllowSshInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref WsNetworkAcl
            RuleNumber: 101
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 22
                To: 22

    WsNetworkAclAllowEphemeralTcpInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref WsNetworkAcl
            RuleNumber: 102
            Protocol: 6
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 1024
                To: 65535

    WsNetworkAclAllowEphemeralUdpInbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref WsNetworkAcl
            RuleNumber: 103
            Protocol: 17
            RuleAction: allow
            Egress: false
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 1024
                To: 65535

    # Web server Network ACLs Outbound
    WsNetworkAclAllowAllOutbound:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref WsNetworkAcl
            RuleNumber: 100
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: "0.0.0.0/0"
            PortRange:
                From: 0
                To: 65535

    # Private instance security group
    PrivateInstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref Vpc
            GroupDescription: Ingress rules private instances
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '443'
              ToPort: '443'
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: !FindInMap [ AvailabilityZone, AZ1, LbCidr ]
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: !FindInMap [ AvailabilityZone, AZ2, LbCidr ]
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: !FindInMap [ AvailabilityZone, AZ1, BastionCidr ]
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: !FindInMap [ AvailabilityZone, AZ2, BastionCidr ]
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: !FindInMap [ AvailabilityZone, AZ1, BastionCidr ]
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: !FindInMap [ AvailabilityZone, AZ2, BastionCidr ]
            SecurityGroupEgress:
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0

    # Public Nginx security group configuration
    PublicWsSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref Vpc
            GroupDescription: Ingress rules Bastion
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0

    # Public Nginx subnet configuration AZ1
    PublicWsSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ1, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ1, PublicWsCidr]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-PublicWsSubnetAZ1"

    # Public Nginx subnet configuration AZ2
    PublicWsSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ2, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ2, PublicWsCidr]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-PublicWsSubnetAZ2"
    
    # Public instance route table 
    PublicWsSubnetRouteTableAZ1:
        DependsOn: RouteTable
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref PublicWsSubnetAZ1
            RouteTableId: !Ref RouteTable

    PublicWsSubnetNetworkAclAZ1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicWsSubnetAZ2
            NetworkAclId: !Ref PublicWsNetworkAcl

    # Bastion security group configuration
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref Vpc
            GroupDescription: Ingress rules Bastion
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0

    # Bastion subnet configuration AZ1
    BastionSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ1, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ1, BastionCidr]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-BastionSubnetAZ1"

    # Bastion subnet configuration AZ2
    BastionSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ2, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ2, BastionCidr]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-BastionSubnetAZ2"

    BastionSubnetRouteTableAZ1:
        DependsOn: RouteTable
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref BastionSubnetAZ1
            RouteTableId: !Ref RouteTable

    BastionSubnetNetworkAclAZ1:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref BastionSubnetAZ1
            NetworkAclId: !Ref BastionNetworkAcl

    BastionSubnetRouteTableAZ2:
        DependsOn: RouteTable
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref BastionSubnetAZ2
            RouteTableId: !Ref RouteTable

    BastionSubnetNetworkAclAZ2:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref BastionSubnetAZ2
            NetworkAclId: !Ref BastionNetworkAcl

    # Subnet configuration AZ1
    LbSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ1, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ1, LbCidr]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-LbSubnetAZ1"

    LbSubnetAZ1RouteTable:
        DependsOn: RouteTable
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref LbSubnetAZ1
            RouteTableId: !Ref RouteTable

    LbSubnetAZ1NetworkAcl:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref LbSubnetAZ1
            NetworkAclId: !Ref LbNetworkAcl

    WsSubnetAZ1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ1, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ1, WsCidr]
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-WsSubnetAZ1"

    WsSubnetAZ1RouteTable:
        DependsOn: PrivateRouteTableAZ1
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref WsSubnetAZ1
            RouteTableId: !Ref PrivateRouteTableAZ1

    WsSubnetAZ1NetworkAcl:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref WsSubnetAZ1
            NetworkAclId: !Ref WsNetworkAcl

    # Subnet configuration AZ2
    LbSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ2, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ2, LbCidr]
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-LbSubnetAZ2"

    LbSubnetAZ2RouteTable:
        DependsOn: RouteTable
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref LbSubnetAZ2
            RouteTableId: !Ref RouteTable

    LbSubnetAZ2NetworkAcl:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref LbSubnetAZ2
            NetworkAclId: !Ref LbNetworkAcl

    WsSubnetAZ2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref Vpc
            AvailabilityZone: !FindInMap [AvailabilityZone, AZ2, Name]
            CidrBlock: !FindInMap [AvailabilityZone, AZ2, WsCidr]
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-WsSubnetAZ2"

    WsSubnetAZ2RouteTable:
        DependsOn: PrivateRouteTableAZ2
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId: !Ref WsSubnetAZ2
            RouteTableId: !Ref PrivateRouteTableAZ2

    WsSubnetAZ2NetworkAcl:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref WsSubnetAZ2
            NetworkAclId: !Ref WsNetworkAcl

Outputs:
    Vpc:
        Description: Vpc Id
        Value: !Ref Vpc
        Export:
            Name: !Sub "${AWS::StackName}-Vpc"

    BastionSubnetAZ1:
        Description: Bastion Subnet AZ1
        Value: !Ref BastionSubnetAZ1
        Export:
            Name: !Sub "${AWS::StackName}-BastionSubnetAZ1"

    LbSubnetAZ1:
        Description: Load Balancer Subnet AZ1
        Value: !Ref LbSubnetAZ1
        Export:
            Name: !Sub "${AWS::StackName}-LbSubnetAZ1"

    WsSubnetAZ1:
        Description: Web Server Subnet AZ1
        Value: !Ref WsSubnetAZ1
        Export:
            Name: !Sub "${AWS::StackName}-WsSubnetAZ1"

    BastionSubnetAZ2:
        Description: Bastion Subnet AZ2
        Value: !Ref BastionSubnetAZ2
        Export:
            Name: !Sub "${AWS::StackName}-BastionSubnetAZ2"

    LbSubnetAZ2:
        Description: Load Balancer Subnet AZ2
        Value: !Ref LbSubnetAZ2
        Export:
            Name: !Sub "${AWS::StackName}-LbSubnetAZ2"

    WsSubnetAZ2:
        Description: Web Server Subnet AZ2
        Value: !Ref WsSubnetAZ2
        Export:
            Name: !Sub "${AWS::StackName}-WsSubnetAZ2"

    BastionSecurityGroup:
        Description: Bastion Security Group
        Value: !Ref BastionSecurityGroup
        Export:
            Name: !Sub "${AWS::StackName}-BastionSecurityGroup"

    AZ1:
        Description: Availability Zone 1
        Value: !FindInMap [AvailabilityZone, AZ1, Name]
        Export:
            Name: !Sub "${AWS::StackName}-AZ1"

    AZ2:
        Description: Availability Zone 2
        Value: !FindInMap [AvailabilityZone, AZ2, Name]
        Export:
            Name: !Sub "${AWS::StackName}-AZ2"
